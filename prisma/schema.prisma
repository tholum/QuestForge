// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Models following PROJECT_OVERVIEW.md naming conventions

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication fields
  emailVerified        Boolean   @default(false)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  lastLoginAt          DateTime?
  loginAttempts        Int       @default(0)
  lockedUntil          DateTime?

  // Gamification data
  totalXp       Int @default(0)
  currentLevel  Int @default(1)
  streakCount   Int @default(0)
  lastActivity  DateTime?

  // Preferences
  preferences Json?

  // Relations
  goals              Goal[]
  progress           Progress[]
  userAchievements   UserAchievement[]
  bibleReadingPlans  BibleReadingPlan[]
  bibleReadings      BibleReading[]
  studySessions      StudySession[]
  prayerRequests     PrayerRequest[]
  scriptureBookmarks ScriptureBookmark[]

  @@map("User")
}

model Module {
  id          String   @id
  name        String
  version     String
  isEnabled   Boolean  @default(true)
  isInstalled Boolean  @default(false)
  config      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goals Goal[]

  @@map("Module")
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  targetDate  DateTime?
  difficulty  String    @default("medium") // easy, medium, hard, expert
  priority    String    @default("medium") // low, medium, high, urgent
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  // Polymorphic module data
  moduleData Json?

  // Self-referencing for sub-goals
  parentGoalId String?
  parentGoal   Goal?   @relation("GoalHierarchy", fields: [parentGoalId], references: [id])
  subGoals     Goal[]  @relation("GoalHierarchy")

  // Relations
  progress      Progress[]
  studySessions StudySession[]

  @@index([userId, isCompleted])
  @@index([moduleId])
  @@index([parentGoalId])
  @@map("Goal")
}

model Progress {
  id          String   @id @default(cuid())
  value       Float    @default(0)
  maxValue    Float    @default(100)
  xpEarned    Int      @default(0)
  notes       String?
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([userId, recordedAt])
  @@index([goalId])
  @@map("Progress")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  tier        String   // bronze, silver, gold, platinum
  moduleId    String?
  conditions  Json     // Achievement conditions
  xpReward    Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@index([moduleId])
  @@map("Achievement")
}

model UserAchievement {
  id          String   @id @default(cuid())
  unlockedAt  DateTime @default(now())
  progress    Float    @default(0)
  isCompleted Boolean  @default(false)

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, isCompleted])
  @@map("UserAchievement")
}

// Bible Study Module Models

// Bible reading plans
model BibleReadingPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  planType    String   // 'preset', 'custom'  
  presetId    String?  // Reference to preset plans
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings BibleReading[]

  @@index([userId, isActive])
  @@map("BibleReadingPlan")
}

// Daily reading assignments
model BibleReading {
  id                  String    @id @default(cuid())
  planId              String
  userId              String
  assignedDate        DateTime
  passages            Json      // Array of scripture references
  isCompleted         Boolean   @default(false)
  completedAt         DateTime?
  readingTimeMinutes  Int?
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  plan BibleReadingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([planId, assignedDate])
  @@index([userId, assignedDate])
  @@map("BibleReading")
}

// Study sessions
model StudySession {
  id               String    @id @default(cuid())
  userId           String
  goalId           String?   // Optional link to related goal
  title            String
  description      String?
  passages         Json?     // Array of scripture references
  durationMinutes  Int?
  studyDate        DateTime
  notes            String?   // Rich text content
  tags             Json?     // Array of tags
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId, studyDate])
  @@index([goalId])
  @@map("StudySession")
}

// Prayer requests
model PrayerRequest {
  id                String    @id @default(cuid())
  userId            String
  title             String
  description       String?
  category          String    @default("personal") // 'personal', 'family', 'ministry', 'world'
  priority          String    @default("medium")   // 'low', 'medium', 'high', 'urgent'
  isPrivate         Boolean   @default(true)
  isAnswered        Boolean   @default(false)
  answeredAt        DateTime?
  answerDescription String?
  requestDate       DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isAnswered])
  @@index([userId, category])
  @@map("PrayerRequest")
}

// Scripture bookmarks
model ScriptureBookmark {
  id         String    @id @default(cuid())
  userId     String
  reference  String    // "Genesis 1:1", "John 3:16"
  version    String    @default("ESV") // Bible translation
  text       String?   // Cached verse text
  notes      String?
  highlights Json?     // Array of highlight objects
  tags       Json?     // Array of tags
  isPrivate  Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, reference])
  @@index([userId, version])
  @@map("ScriptureBookmark")
}

// Preset reading plans
model BibleReadingPlanPreset {
  id           String   @id @default(cuid())
  name         String
  description  String?
  durationDays Int
  planData     Json     // JSON with daily assignments
  category     String?  // 'chronological', 'canonical', 'topical'
  difficulty   String   @default("medium")
  isPopular    Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([isPopular, category])
  @@map("BibleReadingPlanPreset")
}
