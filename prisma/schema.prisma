// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Models following PROJECT_OVERVIEW.md naming conventions

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication fields
  emailVerified        Boolean   @default(false)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  lastLoginAt          DateTime?
  loginAttempts        Int       @default(0)
  lockedUntil          DateTime?

  // Gamification data
  totalXp       Int @default(0)
  currentLevel  Int @default(1)
  streakCount   Int @default(0)
  lastActivity  DateTime?

  // Preferences
  preferences Json?

  // Profile enhancements
  profilePicture       String?
  bio                  String?
  timezone             String    @default("UTC")
  locale               String    @default("en-US")
  onboardingCompleted  Boolean   @default(false)
  lastActiveAt         DateTime?

  // Relations
  goals              Goal[]
  progress           Progress[]
  userAchievements   UserAchievement[]
  bibleReadingPlans  BibleReadingPlan[]
  bibleReadings      BibleReading[]
  studySessions      StudySession[]
  prayerRequests     PrayerRequest[]
  scriptureBookmarks ScriptureBookmark[]
  workProjects       WorkProject[]
  projectTasks       ProjectTask[]
  timeEntries        TimeEntry[]
  careerGoals        CareerGoal[]
  performanceMetrics PerformanceMetric[]
  userSettings       UserSetting[]
  userModuleConfigs  UserModuleConfig[]
  analyticsCache     AnalyticsCache[]
  calendarEvents     CalendarEvent[]
  
  // Fitness-specific relations
  workoutPlans       WorkoutPlan[]
  workouts           Workout[]
  exerciseTemplates  ExerciseTemplate[]
  personalRecords    PersonalRecord[]

  // Nutrition-specific relations
  foods              Food[]
  foodLogs           FoodLog[]
  nutritionGoals     NutritionGoal[]
  waterIntakes       WaterIntake[]
  meals              Meal[]

  @@map("User")
}

model Module {
  id          String   @id
  name        String
  version     String
  isEnabled   Boolean  @default(true)
  isInstalled Boolean  @default(false)
  config      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goals Goal[]

  @@map("Module")
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  targetDate  DateTime?
  difficulty  String    @default("medium") // easy, medium, hard, expert
  priority    String    @default("medium") // low, medium, high, urgent
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  // Polymorphic module data
  moduleData Json?

  // Self-referencing for sub-goals
  parentGoalId String?
  parentGoal   Goal?   @relation("GoalHierarchy", fields: [parentGoalId], references: [id])
  subGoals     Goal[]  @relation("GoalHierarchy")

  // Relations
  progress       Progress[]
  studySessions  StudySession[]
  workProjects   WorkProject[]
  careerGoals    CareerGoal[]
  calendarEvents CalendarEvent[]

  @@index([userId, isCompleted])
  @@index([moduleId])
  @@index([parentGoalId])
  @@map("Goal")
}

model Progress {
  id          String   @id @default(cuid())
  value       Float    @default(0)
  maxValue    Float    @default(100)
  xpEarned    Int      @default(0)
  notes       String?
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([userId, recordedAt])
  @@index([goalId])
  @@map("Progress")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  tier        String   // bronze, silver, gold, platinum
  moduleId    String?
  conditions  Json     // Achievement conditions
  xpReward    Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@index([moduleId])
  @@map("Achievement")
}

model UserAchievement {
  id          String   @id @default(cuid())
  unlockedAt  DateTime @default(now())
  progress    Float    @default(0)
  isCompleted Boolean  @default(false)

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, isCompleted])
  @@map("UserAchievement")
}

// Bible Study Module Models

// Bible reading plans
model BibleReadingPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  planType    String   // 'preset', 'custom'  
  presetId    String?  // Reference to preset plans
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings BibleReading[]

  @@index([userId, isActive])
  @@map("BibleReadingPlan")
}

// Daily reading assignments
model BibleReading {
  id                  String    @id @default(cuid())
  planId              String
  userId              String
  assignedDate        DateTime
  passages            Json      // Array of scripture references
  isCompleted         Boolean   @default(false)
  completedAt         DateTime?
  readingTimeMinutes  Int?
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  plan BibleReadingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([planId, assignedDate])
  @@index([userId, assignedDate])
  @@map("BibleReading")
}

// Study sessions
model StudySession {
  id               String    @id @default(cuid())
  userId           String
  goalId           String?   // Optional link to related goal
  title            String
  description      String?
  passages         Json?     // Array of scripture references
  durationMinutes  Int?
  studyDate        DateTime
  notes            String?   // Rich text content
  tags             Json?     // Array of tags
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId, studyDate])
  @@index([goalId])
  @@map("StudySession")
}

// Prayer requests
model PrayerRequest {
  id                String    @id @default(cuid())
  userId            String
  title             String
  description       String?
  category          String    @default("personal") // 'personal', 'family', 'ministry', 'world'
  priority          String    @default("medium")   // 'low', 'medium', 'high', 'urgent'
  isPrivate         Boolean   @default(true)
  isAnswered        Boolean   @default(false)
  answeredAt        DateTime?
  answerDescription String?
  requestDate       DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isAnswered])
  @@index([userId, category])
  @@map("PrayerRequest")
}

// Scripture bookmarks
model ScriptureBookmark {
  id         String    @id @default(cuid())
  userId     String
  reference  String    // "Genesis 1:1", "John 3:16"
  version    String    @default("ESV") // Bible translation
  text       String?   // Cached verse text
  notes      String?
  highlights Json?     // Array of highlight objects
  tags       Json?     // Array of tags
  isPrivate  Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, reference])
  @@index([userId, version])
  @@map("ScriptureBookmark")
}

// Preset reading plans
model BibleReadingPlanPreset {
  id           String   @id @default(cuid())
  name         String
  description  String?
  durationDays Int
  planData     Json     // JSON with daily assignments
  category     String?  // 'chronological', 'canonical', 'topical'
  difficulty   String   @default("medium")
  isPopular    Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([isPopular, category])
  @@map("BibleReadingPlanPreset")
}

// Work Projects Module Models

// Work Projects
model WorkProject {
  id              String    @id @default(cuid())
  userId          String
  goalId          String?   // Link to related goal
  name            String
  description     String?
  projectType     String    // 'client', 'internal', 'personal', 'team'
  status          String    @default("active") // 'planning', 'active', 'on-hold', 'completed', 'cancelled'
  priority        String    @default("medium") // 'low', 'medium', 'high', 'urgent'
  startDate       DateTime?
  endDate         DateTime?
  estimatedHours  Int?
  actualHours     Int       @default(0)
  budget          Float?
  clientName      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal            Goal?     @relation(fields: [goalId], references: [id], onDelete: SetNull)
  tasks           ProjectTask[]
  timeEntries     TimeEntry[]
  milestones      ProjectMilestone[]

  @@index([userId, status])
  @@index([goalId])
  @@map("WorkProject")
}

// Project Tasks  
model ProjectTask {
  id              String     @id @default(cuid())
  projectId       String
  parentTaskId    String?    // For subtasks
  userId          String
  title           String
  description     String?
  status          String     @default("todo") // 'todo', 'in-progress', 'review', 'completed'
  priority        String     @default("medium")
  estimatedHours  Float?
  actualHours     Float      @default(0)
  assignedTo      String?    // For team projects
  dueDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  project         WorkProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask      ProjectTask? @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subTasks        ProjectTask[] @relation("TaskHierarchy")
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries     TimeEntry[]

  @@index([projectId, status])
  @@index([userId, dueDate])
  @@map("ProjectTask")
}

// Time Tracking
model TimeEntry {
  id              String     @id @default(cuid())
  userId          String
  projectId       String
  taskId          String?
  description     String?
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  hourlyRate      Float?
  isBillable      Boolean    @default(false)
  entryDate       DateTime
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         WorkProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task            ProjectTask? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@index([userId, entryDate])
  @@index([projectId])
  @@map("TimeEntry")
}

// Career Development
model CareerGoal {
  id              String     @id @default(cuid())
  userId          String
  goalId          String?    // Link to main goal
  category        String     // 'skill', 'promotion', 'certification', 'networking', 'learning'
  title           String
  description     String?
  currentLevel    String?    // 'beginner', 'intermediate', 'advanced', 'expert'
  targetLevel     String?
  targetDate      DateTime?
  isCompleted     Boolean    @default(false)
  completedAt     DateTime?
  evidence        Json?      // Achievement evidence
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal            Goal?      @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId, category])
  @@map("CareerGoal")
}

// Performance Metrics
model PerformanceMetric {
  id              String     @id @default(cuid())
  userId          String
  metricType      String     // 'productivity', 'efficiency', 'quality', 'satisfaction'
  metricName      String
  value           Float
  targetValue     Float?
  unit            String?    // 'hours', 'tasks', 'projects', 'percentage'
  period          String     // 'daily', 'weekly', 'monthly', 'quarterly'
  recordDate      DateTime
  notes           String?
  createdAt       DateTime   @default(now())

  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, recordDate])
  @@index([metricType, period])
  @@map("PerformanceMetric")
}

// Project Milestones
model ProjectMilestone {
  id              String     @id @default(cuid())
  projectId       String
  title           String
  description     String?
  dueDate         DateTime
  completedAt     DateTime?
  isCompleted     Boolean    @default(false)
  priority        String     @default("medium")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  project         WorkProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, dueDate])
  @@map("ProjectMilestone")
}

// User Settings and Preferences
model UserSetting {
  id           String   @id @default(cuid())
  userId       String
  category     String   // 'notification', 'privacy', 'display', 'account'
  settingKey   String
  settingValue String
  dataType     String   @default("string") // 'string', 'boolean', 'number', 'json'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, settingKey])
  @@index([userId, category])
  @@map("UserSetting")
}

// Module configurations per user
model UserModuleConfig {
  id            String    @id @default(cuid())
  userId        String
  moduleId      String
  isEnabled     Boolean   @default(true)
  configuration String?   // JSON config specific to module
  lastUsedAt    DateTime?
  usageCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([userId])
  @@map("UserModuleConfig")
}

// Analytics cache for performance
model AnalyticsCache {
  id        String   @id @default(cuid())
  userId    String
  cacheKey  String   // 'weekly_summary', 'monthly_trends', etc.
  data      String   // JSON cached data
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cacheKey])
  @@index([userId])
  @@index([expiresAt])
  @@map("AnalyticsCache")
}

// Calendar events (for goals and deadlines)
model CalendarEvent {
  id          String    @id @default(cuid())
  userId      String
  goalId      String?
  title       String
  description String?
  eventType   String    // 'goal_deadline', 'milestone', 'reminder', 'custom'
  startDate   DateTime
  endDate     DateTime?
  isAllDay    Boolean   @default(false)
  color       String?   // Hex color for display
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@index([userId, startDate])
  @@index([goalId])
  @@map("CalendarEvent")
}

// Fitness Module Models

// Workout Plans - organize workouts into weekly/monthly programs
model WorkoutPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isTemplate  Boolean  @default(false)
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]

  @@index([userId, isActive])
  @@index([userId, startDate])
  @@map("WorkoutPlan")
}

// Individual Workouts - daily workout sessions
model Workout {
  id                String    @id @default(cuid())
  planId            String?   // Optional - can be standalone workouts
  userId            String
  name              String
  description       String?
  scheduledDate     DateTime?
  completedAt       DateTime?
  isTemplate        Boolean   @default(false)
  workoutType       String    // 'cardio', 'strength', 'flexibility', 'mixed'
  estimatedDuration Int?      // minutes
  actualDuration    Int?      // minutes
  notes             String?
  xpAwarded         Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  plan         WorkoutPlan?     @relation(fields: [planId], references: [id], onDelete: SetNull)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises    WorkoutExercise[]
  personalRecords PersonalRecord[]

  @@index([userId, scheduledDate])
  @@index([userId, completedAt])
  @@index([planId])
  @@map("Workout")
}

// Exercise Templates - master list of exercises
model ExerciseTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  category        String   // 'chest', 'back', 'legs', 'shoulders', 'arms', 'core', 'cardio'
  muscleGroups    Json     // Array of targeted muscle groups
  equipmentNeeded String?
  instructions    Json?    // Array of instruction steps
  videoUrl        String?
  imageUrl        String?
  isCustom        Boolean  @default(false)
  userId          String?  // null for system exercises, set for custom user exercises
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  personalRecords  PersonalRecord[]

  @@index([category, name])
  @@index([userId, isActive])
  @@index([name]) // For search functionality
  @@map("ExerciseTemplate")
}

// Junction table - exercises within workouts with specific targets
model WorkoutExercise {
  id               String   @id @default(cuid())
  workoutId        String
  exerciseId       String
  orderIndex       Int      // Order within workout (0, 1, 2, ...)
  targetSets       Int?
  targetReps       Int?
  targetWeight     Float?   // lbs or kg
  targetDuration   Int?     // seconds for time-based exercises
  targetDistance   Float?   // miles, km for cardio
  restBetweenSets  Int?     // seconds
  notes            String?
  completedAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  workout   Workout          @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise  ExerciseTemplate @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets      WorkoutSet[]

  @@unique([workoutId, orderIndex]) // Ensure proper ordering
  @@index([workoutId, orderIndex])
  @@map("WorkoutExercise")
}

// Individual sets within exercise - actual performance data
model WorkoutSet {
  id                String    @id @default(cuid())
  workoutExerciseId String
  setNumber         Int       // 1, 2, 3, etc.
  reps              Int?
  weight            Float?    // actual weight used
  duration          Int?      // actual seconds
  distance          Float?    // actual distance
  restAfter         Int?      // seconds of rest after this set
  rpe               Int?      // Rate of Perceived Exertion (1-10)
  notes             String?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutExerciseId, setNumber])
  @@index([workoutExerciseId, setNumber])
  @@map("WorkoutSet")
}

// Track personal records and achievements
model PersonalRecord {
  id           String   @id @default(cuid())
  userId       String
  exerciseId   String
  recordType   String   // '1rm', '5rm', 'volume', 'duration', 'distance'
  value        Float
  unit         String   // 'lbs', 'kg', 'seconds', 'miles', 'km'
  previousValue Float?  // Previous record for comparison
  achievedAt   DateTime
  workoutId    String?  // Reference to workout where PR was achieved
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise ExerciseTemplate @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout  Workout?         @relation(fields: [workoutId], references: [id], onDelete: SetNull)

  @@unique([userId, exerciseId, recordType]) // One record per type per exercise per user
  @@index([userId, achievedAt])
  @@index([exerciseId, recordType])
  @@map("PersonalRecord")
}

// Nutrition Module Models

// Food database - master list of foods with nutritional information
model Food {
  id               String   @id @default(cuid())
  name             String
  brand            String?  // Brand name (e.g., "Quaker", "Kellogg's")
  barcode          String?  // UPC/EAN barcode for scanning
  category         String   // 'fruit', 'vegetable', 'meat', 'dairy', 'grain', 'snack', etc.
  
  // Nutritional information per 100g/ml
  caloriesPer100g  Float
  proteinPer100g   Float    // grams
  carbsPer100g     Float    // grams  
  fatPer100g       Float    // grams
  fiberPer100g     Float?   // grams
  sugarPer100g     Float?   // grams
  sodiumPer100g    Float?   // milligrams
  
  // Serving information
  servingSize      Float?   // Default serving size in grams/ml
  servingUnit      String   @default("g") // 'g', 'ml', 'cup', 'piece', etc.
  
  // Additional nutritional data (optional)
  saturatedFatPer100g     Float?   // grams
  transFatPer100g         Float?   // grams  
  cholesterolPer100g      Float?   // milligrams
  vitaminAPer100g         Float?   // mcg RAE
  vitaminCPer100g         Float?   // milligrams
  calciumPer100g          Float?   // milligrams
  ironPer100g             Float?   // milligrams
  potassiumPer100g        Float?   // milligrams
  
  // Food metadata
  isVerified       Boolean  @default(false) // Admin-verified foods vs user-submitted
  isPublic         Boolean  @default(true)  // Public foods vs private user foods
  userId           String?  // null for public foods, set for user-created foods
  source           String?  // 'USDA', 'user', 'manufacturer', etc.
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodLogs         FoodLog[]
  mealFoods        MealFood[]
  
  @@index([name, category])
  @@index([barcode]) // For barcode scanning
  @@index([userId, isPublic])
  @@index([category, isVerified])
  @@map("Food")
}

// User food intake logs - what users actually eat
model FoodLog {
  id          String    @id @default(cuid())
  userId      String
  foodId      String
  mealId      String?   // Optional link to meal
  
  // Consumption details
  quantity    Float     // Amount consumed
  unit        String    // 'g', 'ml', 'cup', 'piece', etc.
  
  // Calculated nutritional values based on quantity
  calories    Float
  protein     Float     // grams
  carbs       Float     // grams
  fat         Float     // grams
  fiber       Float?    // grams
  sugar       Float?    // grams
  sodium      Float?    // milligrams
  
  // Consumption timing
  consumedAt  DateTime  @default(now())
  mealType    String?   // 'breakfast', 'lunch', 'dinner', 'snack'
  
  // Additional metadata
  notes       String?
  isQuickAdd  Boolean   @default(false) // Quick calorie addition vs detailed logging
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  food        Food      @relation(fields: [foodId], references: [id], onDelete: Cascade)
  meal        Meal?     @relation(fields: [mealId], references: [id], onDelete: SetNull)
  
  @@index([userId, consumedAt])
  @@index([userId, mealType])
  @@index([foodId])
  @@index([mealId])
  @@map("FoodLog")
}

// User nutrition goals and targets
model NutritionGoal {
  id                String    @id @default(cuid())
  userId            String
  
  // Daily targets
  dailyCalories     Float
  dailyProtein      Float     // grams
  dailyCarbs        Float     // grams  
  dailyFat          Float     // grams
  dailyFiber        Float?    // grams
  dailySugar        Float?    // grams (limit)
  dailySodium       Float?    // milligrams (limit)
  
  // Macronutrient percentages (should add up to 100)
  proteinPercentage Float?    // % of calories from protein
  carbsPercentage   Float?    // % of calories from carbs
  fatPercentage     Float?    // % of calories from fat
  
  // Goal metadata
  goalType          String    @default("general") // 'weight_loss', 'weight_gain', 'maintenance', 'muscle_gain', 'general'
  activityLevel     String    @default("moderate") // 'sedentary', 'light', 'moderate', 'active', 'very_active'
  
  // Date range for goal
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean   @default(true)
  
  // Goal tracking
  weeklyWeightGoal  Float?    // lbs/kg per week (+ for gain, - for loss)
  currentWeight     Float?    // lbs/kg
  targetWeight      Float?    // lbs/kg
  heightCm          Float?    // cm
  age               Int?      // years
  gender            String?   // 'male', 'female', 'other'
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
  @@index([userId, startDate])
  @@map("NutritionGoal")
}

// Daily water intake tracking
model WaterIntake {
  id          String   @id @default(cuid())
  userId      String
  
  // Water consumption  
  amountMl    Float    // Amount in milliliters
  amountOz    Float?   // Amount in fluid ounces (calculated)
  
  // Timing and context
  recordedAt  DateTime @default(now())
  date        DateTime // Date only for daily aggregation
  source      String?  // 'water', 'tea', 'coffee', 'juice', 'other'
  
  // Metadata
  notes       String?
  temperature String?  // 'cold', 'room', 'warm', 'hot'
  
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
  @@index([userId, recordedAt])
  @@map("WaterIntake")
}

// Meals - grouping foods together by meal occasion
model Meal {
  id            String     @id @default(cuid())
  userId        String
  
  // Meal information
  name          String     // 'Breakfast', 'Lunch', 'Chicken Salad', etc.
  mealType      String     // 'breakfast', 'lunch', 'dinner', 'snack'
  date          DateTime   // Date of the meal
  
  // Timing
  plannedTime   DateTime?  // When the meal is planned
  consumedTime  DateTime?  // When actually consumed
  
  // Calculated totals (aggregate of all foods in meal)
  totalCalories Float      @default(0)
  totalProtein  Float      @default(0)
  totalCarbs    Float      @default(0)
  totalFat      Float      @default(0)
  totalFiber    Float?     @default(0)
  totalSugar    Float?     @default(0)
  totalSodium   Float?     @default(0)
  
  // Meal metadata
  isTemplate    Boolean    @default(false) // Reusable meal templates
  isFavorite    Boolean    @default(false)
  rating        Int?       // 1-5 star rating
  notes         String?
  photoUrl      String?    // Photo of the meal
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodLogs      FoodLog[]  // Foods consumed in this meal
  mealFoods     MealFood[] // For meal templates/recipes
  
  @@index([userId, date])
  @@index([userId, mealType])
  @@index([userId, isTemplate])
  @@map("Meal")
}

// Junction table for meal templates and recipes  
model MealFood {
  id         String   @id @default(cuid())
  mealId     String
  foodId     String
  
  // Quantity in the meal template/recipe
  quantity   Float
  unit       String   // 'g', 'ml', 'cup', 'piece', etc.
  
  // Order in the meal
  orderIndex Int      @default(0)
  
  // Optional preparation notes for this food in the meal
  notes      String?
  
  createdAt  DateTime @default(now())
  
  // Relations
  meal       Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@unique([mealId, foodId]) // Each food can only appear once per meal template
  @@index([mealId, orderIndex])
  @@map("MealFood")
}
